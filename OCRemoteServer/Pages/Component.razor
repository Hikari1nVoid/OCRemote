@page "/component"
@using BlazorStrap
@using System.Text.Json

<h3>Component</h3>

@if (loading)
{
	<BSAlert HasIcon="true" Color="BSColor.Info">Detecting all available Components on connected probers,please wait...</BSAlert>
}
else
{
	<BSListGroup>
		@foreach (var (address, name) in components)
		{
			<BSListGroupItem>@address: @name <BSButton Color="BSColor.Success" OnClick="() => Copy(name)">复制</BSButton></BSListGroupItem>
		}
	</BSListGroup>
	<br />

	@foreach (var (name, methods1) in methods)
	{
		<h4>@name</h4>
		<BSAccordion>
			@foreach (var s in methods1)
			{

				<BSAccordionItem DefaultShown="false">
					<Header>@s</Header>
					<Content>
						@GetDoc(name, s)
					</Content>
				</BSAccordionItem>
			}
		</BSAccordion>
		<br />
	}

}
@code {
	bool loading = true;
	(string address, string name)[] components;
	List<(string name, string[] methods)> methods = new List<(string name, string[] methods)>();
	Dictionary<(string, string), string> docCache = new Dictionary<(string, string), string>();




	protected override async Task OnInitializedAsync()
	{
		var componentJson = await RemoteManager.Request("return require('component').list()").ConfigureAwait(false);
		components = JsonDocument.Parse(componentJson)
			.RootElement.EnumerateObject().Select(x => (address: x.Name, name: x.Value.GetString()!)).ToArray();
		var tasks = new List<Task>();

		foreach (var (address, name) in components.DistinctBy(x => x.name))
		{
			var docJson = await RemoteManager.Request($"return require('component').methods('{address}') or {{}}").ConfigureAwait(false);
			if (docJson == "[]") continue;

			var emethods = JsonDocument.Parse(docJson)
				.RootElement.EnumerateObject().Select(x => x.Name).ToArray();
			methods.Add((name, emethods));
			foreach (var s in emethods)
			{
				tasks.Add(GetDoc1(name, s));
			}
		}

		await Task.WhenAll(tasks);
		loading = false;
		InvokeAsync(StateHasChanged);
	}

	string GetDoc(string name, string s)
	{
		var address = components.First(x => x.name == name).address;

		if (!docCache.ContainsKey((address, s)))
		{
			return "";

		}
		return docCache[(address, s)];

	}

	async Task GetDoc1(string name, string s)
	{
		var address = components.First(x => x.name == name).address;

		var json = await RemoteManager.Request($"return require('component').doc('{address}', '{s}')").ConfigureAwait(false);
		docCache[(address, s)] = json;
	}

	void Copy(string name)
	{
		
	}

}
